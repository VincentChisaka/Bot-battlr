{"ast":null,"code":"var _jsxFileName = \"/home/vincent/Phase2-Code-Challenge/challenge/Bot-battlr/src/components/BotsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BotsPage() {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [botArmy, setBotArmy] = useState([]);\n  useEffect(() => {\n    fetch(\"https://vincentchisaka.github.io/botdb/db.json\").then(res => res.json()).then(bots => setBots(bots));\n  }, []);\n  console.log(bots);\n  function enlistBotToArmy(bot) {\n    if (!botArmy.find(bot1 => bot1 === bot)) {\n      const listedBot = bots.find(bot1 => bot1 === bot);\n      setBotArmy([...botArmy, listedBot]);\n    }\n  }\n  function removeBotFromArmy(armyBot) {\n    const botArmyArray = botArmy.filter(bot => bot !== armyBot);\n    setBotArmy(botArmyArray);\n  }\n  function deleteBotPermanently(armyBot) {\n    if (botArmy.find(bot => bot === armyBot)) {\n      const filterBots = bots.filter(bot => bot !== armyBot);\n      const filterBotArmy = botArmy.filter(bot => bot !== armyBot);\n      setBots(filterBots);\n      setBotArmy(filterBotArmy);\n      fetch(`http://localhost:3000/bots/${armyBot.id}`, {\n        method: \"DELETE\"\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      botArmy: botArmy,\n      removeBot: removeBotFromArmy,\n      deleteBot: deleteBotPermanently\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: bots,\n      addBot: enlistBotToArmy,\n      deleteBot: deleteBotPermanently\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(BotsPage, \"d+K5VIAavQRbiGkfY1a5I9Cs7oE=\");\n_c = BotsPage;\nexport default BotsPage;\nvar _c;\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"names":["React","useEffect","useState","YourBotArmy","BotCollection","BotsPage","bots","setBots","botArmy","setBotArmy","fetch","then","res","json","console","log","enlistBotToArmy","bot","find","bot1","listedBot","removeBotFromArmy","armyBot","botArmyArray","filter","deleteBotPermanently","filterBots","filterBotArmy","id","method"],"sources":["/home/vincent/Phase2-Code-Challenge/challenge/Bot-battlr/src/components/BotsPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\n\nfunction BotsPage() {\n  \n  const [bots, setBots] = useState([]);\n  const [botArmy, setBotArmy] = useState([]);\n  \n  useEffect(() => {\n    fetch(\"https://vincentchisaka.github.io/botdb/db.json\")\n    .then (res => res.json())\n    .then (bots => setBots(bots))\n  }, []);\n\nconsole.log(bots)\n\n  function enlistBotToArmy(bot){\n    if (!botArmy.find(bot1 => bot1 === bot)){\n      const listedBot = bots.find(bot1 => bot1 === bot)\n      setBotArmy([...botArmy, listedBot])\n    }\n  }\n\n  function removeBotFromArmy(armyBot){\n    const botArmyArray = botArmy.filter((bot) => bot !== armyBot)\n    setBotArmy(botArmyArray)\n  }\n\n  function deleteBotPermanently(armyBot){\n    if (botArmy.find((bot) => bot === armyBot)){\n      const filterBots = bots.filter(bot => bot !== armyBot)\n      const filterBotArmy = botArmy.filter(bot => bot !== armyBot)\n      setBots(filterBots)\n      setBotArmy(filterBotArmy)\n\n  fetch (`http://localhost:3000/bots/${armyBot.id}`, {\n    method: \"DELETE\"\n  })\n}\n}\n\n  return (\n    <div>\n      <YourBotArmy botArmy={botArmy} removeBot={removeBotFromArmy} deleteBot={deleteBotPermanently}/>\n      <BotCollection bots={bots} addBot={enlistBotToArmy} deleteBot={deleteBotPermanently}/>\n    </div>\n  )\n}\n\nexport default BotsPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,aAAa,MAAM,iBAAiB;AAAC;AAE5C,SAASC,QAAQ,GAAG;EAAA;EAElB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,gDAAgD,CAAC,CACtDC,IAAI,CAAEC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACxBF,IAAI,CAAEL,IAAI,IAAIC,OAAO,CAACD,IAAI,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAERQ,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC;EAEf,SAASU,eAAe,CAACC,GAAG,EAAC;IAC3B,IAAI,CAACT,OAAO,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,KAAKF,GAAG,CAAC,EAAC;MACtC,MAAMG,SAAS,GAAGd,IAAI,CAACY,IAAI,CAACC,IAAI,IAAIA,IAAI,KAAKF,GAAG,CAAC;MACjDR,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEY,SAAS,CAAC,CAAC;IACrC;EACF;EAEA,SAASC,iBAAiB,CAACC,OAAO,EAAC;IACjC,MAAMC,YAAY,GAAGf,OAAO,CAACgB,MAAM,CAAEP,GAAG,IAAKA,GAAG,KAAKK,OAAO,CAAC;IAC7Db,UAAU,CAACc,YAAY,CAAC;EAC1B;EAEA,SAASE,oBAAoB,CAACH,OAAO,EAAC;IACpC,IAAId,OAAO,CAACU,IAAI,CAAED,GAAG,IAAKA,GAAG,KAAKK,OAAO,CAAC,EAAC;MACzC,MAAMI,UAAU,GAAGpB,IAAI,CAACkB,MAAM,CAACP,GAAG,IAAIA,GAAG,KAAKK,OAAO,CAAC;MACtD,MAAMK,aAAa,GAAGnB,OAAO,CAACgB,MAAM,CAACP,GAAG,IAAIA,GAAG,KAAKK,OAAO,CAAC;MAC5Df,OAAO,CAACmB,UAAU,CAAC;MACnBjB,UAAU,CAACkB,aAAa,CAAC;MAE7BjB,KAAK,CAAG,8BAA6BY,OAAO,CAACM,EAAG,EAAC,EAAE;QACjDC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;EACA;EAEE,oBACE;IAAA,wBACE,QAAC,WAAW;MAAC,OAAO,EAAErB,OAAQ;MAAC,SAAS,EAAEa,iBAAkB;MAAC,SAAS,EAAEI;IAAqB;MAAA;MAAA;MAAA;IAAA,QAAE,eAC/F,QAAC,aAAa;MAAC,IAAI,EAAEnB,IAAK;MAAC,MAAM,EAAEU,eAAgB;MAAC,SAAS,EAAES;IAAqB;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAClF;AAEV;AAAC,GA5CQpB,QAAQ;AAAA,KAARA,QAAQ;AA8CjB,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}